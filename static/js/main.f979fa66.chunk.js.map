{"version":3,"sources":["components/TopNav.tsx","components/MediaCard.tsx","components/RickAndMorty.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TopNav","AppBar","position","color","Toolbar","Typography","variant","statusIconStyle","width","height","marginRight","useStyles","makeStyles","theme","card","breakpoints","down","media","online","offline","status","display","alignItems","MediaCard","cardData","classes","Card","className","Box","flexDirection","CardMedia","image","title","name","pl","mb","gutterBottom","species","component","location","origin","main","flexWrap","padding","cardsContainer","paddingTop","overflow","paddingBottom","loader","justifyContent","paginationContainer","bottom","background","RickAndMorty","searchParams","search","window","URLSearchParams","React","useState","pageData","setPageData","pageFromUrl","get","parseInt","setPageFromQueryString","currPage","setCurrentPage","isLoading","setIsLoading","cardContainerRef","createRef","count","pages","next","prev","paginationInfo","setPaginationInfo","useEffect","fetchData","useLayoutEffect","length","current","scrollIntoView","page","fetch","then","response","json","data","results","info","catch","ref","CircularProgress","map","idx","Pagination","onChange","event","params","set","history","replaceState","pathname","toString","updateQueryString","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f979fa66.chunk.js","sourcesContent":["import {\n    AppBar,\n    Toolbar,\n    Typography\n} from '@material-ui/core';\n\nexport default function TopNav() {\n  return (\n    <AppBar position=\"fixed\" color=\"inherit\">\n        <Toolbar>\n            <Typography variant=\"h6\">\n                Rick And Morty\n            </Typography>\n        </Toolbar>\n    </AppBar>\n  );\n}\n","import {\n  Box,\n  Card,\n  CardMedia,\n  Typography\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport { IRickAndMorty } from '../types';\n\nconst statusIconStyle = {\n    width: 15,\n    height: 15,\n    marginRight: 5,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    [theme.breakpoints.down('sm')]: {\n        width: '100%',\n        marginRight: '0',\n    },\n    display: 'flex',\n    boxSizing: 'border-box',\n    flexDirection: 'column',\n    height: 250,\n    width: '49%',\n    marginBottom: 10,\n    marginRight: '1%',\n    textAlign: 'left',\n  },\n  media: {\n    height: '100%',\n    width: 250,\n    [theme.breakpoints.down('sm')]: {\n        width: 150,\n    },\n  },\n  online: {\n    ...statusIconStyle,\n    color: 'green',\n  },\n  offline: {\n    ...statusIconStyle,\n    color: 'red',\n  },\n  status: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n}));\n\nexport default function MediaCard({ cardData }: { cardData: IRickAndMorty }) {\n  const classes = useStyles();\n  return (\n    <Card className={classes.card}>\n        <Box display=\"flex\" flexDirection=\"row\" width=\"100%\" height=\"100%\">\n            <Box height=\"100%\">\n                <CardMedia\n                    className={classes.media}\n                    image={cardData.image}\n                    title={cardData.name}\n                />\n            </Box>\n            <Box height=\"100%\" pl={2}>\n                <Box mb={1}>\n                    <Typography gutterBottom variant=\"h5\">\n                        {cardData.name}\n                    </Typography>\n                    <Typography gutterBottom variant=\"subtitle2\" className={classes.status}>\n                        {\n                            cardData.status === 'Alive' ?\n                            <FiberManualRecordIcon className={classes.online}/> : \n                            <FiberManualRecordIcon className={classes.offline}/>\n                        }\n                        {cardData.status}: {cardData.species}\n                    </Typography>\n                </Box>\n                <Box mb={1}>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        Last known location\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"p\">\n                        {cardData.location.name}\n                    </Typography>\n                </Box>\n                <Box mb={2}>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        Origin:\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"p\">\n                        {cardData.origin.name}\n                    </Typography>\n                </Box>\n            </Box>\n        </Box>\n    </Card>\n  );\n};\n \n","import React from 'react';\nimport Card from './MediaCard';\nimport { Box, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { IPaginationInfo, IResponse, IRickAndMorty } from '../types';\n\nconst useStyles = makeStyles({\n  main: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    padding: 10,\n  },\n  cardsContainer: {\n    paddingTop: 80,\n    width: '100%',\n    display: 'flex',\n    overflow: 'scroll',\n    flexWrap: 'wrap',\n    padding: 10,\n    paddingBottom: 80,\n  },\n  loader: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '80vh',\n    width: '100%',\n  },\n  paginationContainer: {\n    display: 'flex',\n    paddingTop: 10,\n    paddingBottom: 10,\n    position: 'fixed',\n    bottom: 0,\n    justifyContent: 'center',\n    background: '#fff',\n    width: '100%',\n  }\n});\n\n\nexport default function RickAndMorty() {\n  const classes = useStyles();\n\n  const searchParams = () => {\n    const search = window.location.search;\n    const params = new URLSearchParams(search);\n    return params;\n  }\n\n  const setPageFromQueryString = () => {\n    const params = searchParams();\n    const pageFromUrl = params.get('page');\n    if (pageFromUrl) {\n      return parseInt(pageFromUrl);\n    }\n    return 1;\n  }\n\n  const updateQueryString = (page: number) => {\n    const params = searchParams();\n    params.set('page', `${page}`);\n    window.history.replaceState({}, '', `${window.location.pathname}?${params.toString()}`);\n  }\n\n  const [pageData, setPageData] = React.useState<IRickAndMorty[]>([]);\n  const [currPage, setCurrentPage] = React.useState<number>(setPageFromQueryString());\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const cardContainerRef = React.createRef<HTMLDivElement>();\n  const [paginationInfo, setPaginationInfo] = React.useState<IPaginationInfo>({\n    count: 0,\n    pages: 0,\n    next: null,\n    prev: null,\n  });\n\n  React.useEffect(() => {\n    fetchData(currPage);\n  }, [currPage]);\n\n  React.useLayoutEffect(() => {\n    if(pageData.length > 0) {\n      cardContainerRef.current?.scrollIntoView();\n    }\n  }, [pageData, cardContainerRef]);\n\n  const fetchData = (page: number) => {\n    setIsLoading(true)\n    fetch(`https://rickandmortyapi.com/api/character/?page=${page}`)\n        .then(response => response.json())\n        .then((data: IResponse) => {\n            setPageData(data.results);\n            setPaginationInfo(data.info);\n            setIsLoading(false);\n        }).catch(() => setIsLoading(false))\n  }\n\n  const handlePageClick = (event: object, page: number) => {\n    setCurrentPage(page);\n    updateQueryString(page);\n  }\n\n  return (\n    <Box className={classes.main}>\n        {\n            <div className={classes.cardsContainer} ref={cardContainerRef}>\n                {\n                  isLoading ? \n                    <Box className={classes.loader}>\n                      <CircularProgress />\n                    </Box> : \n                    pageData.map((cardData, idx) => <Card key={idx} cardData={cardData}/>)\n                }\n            </div>\n        }\n        <Box className={classes.paginationContainer}>\n            <Pagination page={currPage} count={paginationInfo.pages} onChange={handlePageClick}/>\n        </Box>\n    </Box>\n  );\n};\n\n","import TopNav from './components/TopNav';\nimport RickAndMorty from './components/RickAndMorty';\n\nconst App = () => (\n    <>\n      <TopNav />\n      <RickAndMorty />\n    </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}